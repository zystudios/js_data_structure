/*543. 二叉树的直径
给定一棵二叉树，你需要计算它的直径长度。一棵二叉树的直径长度是任意两个结点路径长度中的最大值。这条路径可能穿过也可能不穿过根结点。


其实就是给两个节点，找出这俩节点最长的路径

递归遍历，分别求左右子树的深度，累加

*/


var diameterOfBinaryTree = function(root) {
    // 首先，路径是0
    let path = 0;

    function depth(rootNode) {
        if (!rootNode) {
            // 如果不存在根节点，则深度为0
            return 0;
        }
        // 递归，获取左子树的深度
        let L = depth(rootNode.left);
        // 递归，获取右子树的深度
        let R = depth(rootNode.right);

        /* 关键点1
        L+R的公式是如何而来？
        等同于：左子树深度(节点个数) + 右子树深度（节点个数）
        便是这株二叉树从最左侧叶子节点到最右侧叶子节点的最长路径
        类似于平衡二叉树的最小值节点到最大值节点的最长路径
         */
        // 获取该树的最长路径和现有最长路径中最大的那个
        path = Math.max(path, L + R);
        /* 关键点2
        已知根节点的左右子树的深度，
        则，左右子树深度的最大值 + 1，
        便是以根节点为数的最大深度*/

        // 上面的path 只是左右子树的深度和，不包括头结点，所以，这里要加上头结点
        return Math.max(L, R) + 1;
    }

    depth(root);

    // 由于depth函数中已经默认加上数节点的自身根节点路径了，故此处需减1
    return path;
};
